buildscript {
  repositories {
    jcenter()
    maven { url = 'https://files.minecraftforge.net/maven' }
  }
  dependencies {
    classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
  }
}

plugins {
  id 'com.matthewprenger.cursegradle' version "1.4.0"
  id 'maven-publish'
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
  sourceCompatibility = targetCompatibility = '1.8'
}

def ENV = System.getenv()

version = projectBaseVersion + '+' + mcVersion
group = projectGroup
archivesBaseName = projectArchiveBaseName

def mcFullVersion = "$mcVersion-$forgeVersion"
def mcShortVersion = mcVersion.substring(0, mcVersion.lastIndexOf('.'))

minecraft {
  version = mcFullVersion
  runDir = "run"
  mappings = voldemappings

  // Replace the version string in source
  replace '@VERSION@', project.version
}

repositories {
  maven { // JEI
    name = 'Progwml6 maven'
    setUrl('http://dvs1.progwml6.com/files/maven/')
  }
  maven { // JEI fallback
    name = 'ModMaven'
    url 'modmaven.k-4u.nl'
  }
  maven { // CodeChickenLib
    name = 'ChickenBones maven'
    url 'http://chickenbones.net/maven/'
  }
  maven { // The One Probe
    name 'tterrag maven'
    url "https://maven.tterrag.com/"
  }
  maven { // GTCE
    name = 'Curseforge'
    url 'https://minecraft.curseforge.com/api/maven'
  }
  maven { // Forestry
    name 'ic2 maven'
    url 'http://maven.ic2.player.to/'
  }
}

dependencies {
  deobfCompile "gregtechce:gregtech:$mcVersion:$gtceVersion"
  deobfCompile "mezz.jei:jei_$mcVersion:$jeiVersion"
  deobfCompile "codechicken:CodeChickenLib:$mcVersion-$cclVersion:deobf"
  deobfCompile "mcjty.theoneprobe:TheOneProbe-$mcShortVersion:$mcShortVersion-$topVersion"
  deobfCompile ("net.sengir.forestry:forestry_$mcVersion:$forestryVersion") {
    transitive = false
  }
}

processResources {
  // Rerun this step every time these change
  inputs.property "version", project.version
  inputs.property "mcversion", project.minecraft.version

  // Inject version and Minecraft version to mod info
  from(sourceSets.main.resources.srcDirs) {
    include 'mcmod.info'

    expand 'version': project.version, 'mcversion': project.minecraft.version
  }

  // Include everything else as is
  from(sourceSets.main.resources.srcDirs) {
    exclude 'mcmod.info'
  }
}

String parseChangelog(String path) {
	def file = new File(path)

	if (!file.exists())
		return '(no changelog)'
	def changelog = ""
  def end = false

	file.eachLine {
		if (end || it == null)
			return
		if (!it.startsWith('==='))
			changelog += "$it\n"
    else
      end = true
	}
	return changelog
}

tasks.curseforge.enabled = ENV.CURSE_API_KEY && project.hasProperty('curseProjectId') && project.hasProperty('curseGameVersion')

curseforge {
  if (ENV.CURSE_API_KEY)
    apiKey = ENV.CURSE_API_KEY

  project {
    id = curseProjectId
    changelog = parseChangelog('changelog.txt')
    releaseType = 'beta'
    addGameVersion curseGameVersion
    addGameVersion 'Forge'
    addGameVersion 'Java 8'
    mainArtifact(jar) {
    	displayName = "[$mcVersion] $projectName-${project.version}"
    }
    relations {
    	requiredDependency 'gregtechce'
    }
	}
}

publishing {
  tasks.publish.dependsOn 'build'
	publications {
		mavenJava(MavenPublication) {
			groupId = project.group
			artifactId = project.archivesBaseName
			version = project.version

			artifact sourceJar
		}
	}

	repositories {
		if (ENV.MAVEN_USER && ENV.MAVEN_PASS) {
			maven {
				if (!ENV.MAVEN_REPO) {
					println('env variable $MAVEN_REPO is not defined!');
					url ""
        } else {
					url ENV.MAVEN_REPO
        }
				credentials {
					username = ENV.MAVEN_USER
					password = ENV.MAVEN_PASS
				}
			}
		} else {
			println("properties mavenUser and/or mavenPass are not defined!")
		}
	}
}
